// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/tq-systems/go-dbus/serial (interfaces: Client)
//
// Generated by this command:
//
//	mockgen --build_flags=--mod=mod -destination=../mocks/serial/mock_serial.go -package=serial github.com/tq-systems/go-dbus/serial Client
//

// Package serial is a generated GoMock package.
package serial

import (
	reflect "reflect"

	serial "github.com/tq-systems/go-dbus/serial"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// BindInterface mocks base method.
func (m *MockClient) BindInterface(arg0 string, arg1 any, arg2 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindInterface", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// BindInterface indicates an expected call of BindInterface.
func (mr *MockClientMockRecorder) BindInterface(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindInterface", reflect.TypeOf((*MockClient)(nil).BindInterface), arg0, arg1, arg2)
}

// GetInterface mocks base method.
func (m *MockClient) GetInterface(arg0 string, arg1 any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInterface", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetInterface indicates an expected call of GetInterface.
func (mr *MockClientMockRecorder) GetInterface(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInterface", reflect.TypeOf((*MockClient)(nil).GetInterface), arg0, arg1)
}

// GetInterfaceRaw mocks base method.
func (m *MockClient) GetInterfaceRaw(arg0 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInterfaceRaw", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInterfaceRaw indicates an expected call of GetInterfaceRaw.
func (mr *MockClientMockRecorder) GetInterfaceRaw(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInterfaceRaw", reflect.TypeOf((*MockClient)(nil).GetInterfaceRaw), arg0)
}

// ListInterfaces mocks base method.
func (m *MockClient) ListInterfaces() (map[string]serial.BindState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInterfaces")
	ret0, _ := ret[0].(map[string]serial.BindState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInterfaces indicates an expected call of ListInterfaces.
func (mr *MockClientMockRecorder) ListInterfaces() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInterfaces", reflect.TypeOf((*MockClient)(nil).ListInterfaces))
}

// Reset mocks base method.
func (m *MockClient) Reset(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reset", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reset indicates an expected call of Reset.
func (mr *MockClientMockRecorder) Reset(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockClient)(nil).Reset), arg0)
}

// SetOperState mocks base method.
func (m *MockClient) SetOperState(arg0 string, arg1 serial.OperState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetOperState", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetOperState indicates an expected call of SetOperState.
func (mr *MockClientMockRecorder) SetOperState(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOperState", reflect.TypeOf((*MockClient)(nil).SetOperState), arg0, arg1)
}

// UnbindInterface mocks base method.
func (m *MockClient) UnbindInterface(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnbindInterface", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnbindInterface indicates an expected call of UnbindInterface.
func (mr *MockClientMockRecorder) UnbindInterface(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnbindInterface", reflect.TypeOf((*MockClient)(nil).UnbindInterface), arg0)
}
