// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/tq-systems/go-dbus/dbus (interfaces: Service)
//
// Generated by this command:
//
//	mockgen --build_flags=--mod=mod -destination=../mocks/dbus/mock_dbus.go -package=dbus github.com/tq-systems/go-dbus/dbus Service
//

// Package dbus is a generated GoMock package.
package dbus

import (
	reflect "reflect"

	dbus "github.com/godbus/dbus/v5"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Export mocks base method.
func (m *MockService) Export(arg0, arg1 string, arg2 any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Export", arg0, arg1, arg2)
}

// Export indicates an expected call of Export.
func (mr *MockServiceMockRecorder) Export(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Export", reflect.TypeOf((*MockService)(nil).Export), arg0, arg1, arg2)
}

// GetConnection mocks base method.
func (m *MockService) GetConnection() *dbus.Conn {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnection")
	ret0, _ := ret[0].(*dbus.Conn)
	return ret0
}

// GetConnection indicates an expected call of GetConnection.
func (mr *MockServiceMockRecorder) GetConnection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnection", reflect.TypeOf((*MockService)(nil).GetConnection))
}

// Serve mocks base method.
func (m *MockService) Serve() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Serve")
	ret0, _ := ret[0].(error)
	return ret0
}

// Serve indicates an expected call of Serve.
func (mr *MockServiceMockRecorder) Serve() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Serve", reflect.TypeOf((*MockService)(nil).Serve))
}

// Stop mocks base method.
func (m *MockService) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockServiceMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockService)(nil).Stop))
}
